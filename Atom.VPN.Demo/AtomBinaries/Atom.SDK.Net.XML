<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom.SDK.Net</name>
    </assembly>
    <members>
        <member name="T:Atom.SDK.Net.Enumerations.DailErrorType">
            <summary>
            Represents the type of error occured.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.Exception">
            <summary>
            The error type is not defined, see the Exception associated with the event for more info.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.ServerEmpty">
            <summary>
            The SDK could not obtain a server to connect to.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.ConnectionTimedOut">
            <summary>
            The connection timed out.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.CannotResolveHost">
            <summary>
            The SDK could not resolve host.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.TLSHandshakeFailed">
            <summary>
            A common error which occurs with OpenVPN protocols..
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.InactivityTimeout">
            <summary>
            The connection was terminated by the server due to inactivity.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.AuthFailed">
            <summary>
            The client could not be authenticated.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.TelnetClientFailed">
            <summary>
            There was a error opening a port to listen to OpenVPN connection state.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.ConnectionReset">
            <summary>
            The connection was reset.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.Stealth_Services_not_ready">
            <summary>
            There was a problem starting or finding the Stealth service.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.DailErrorType.AdapterDisabled">
            <summary>
            The virtual network adapter used for the provided protocol was either disabled or not installed.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Enumerations.Protocols">
            <summary>
            Represents network protocols used to create a VPN tunnel.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Enumerations.RASProtocols">
            <summary>
            Represents network protocols for a remote access service (RAS) entry.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.VPNConnectionState">
            <summary>
            Represents Vpn Connection state
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.VPNConnectionState.DISCONNECTED">
            <summary>
            The client has disconnected or failed a connection attempt.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.VPNConnectionState.AUTHENTICATING">
            <summary>
            The authentication process is starting.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.VPNConnectionState.AUTHENTICATED">
            <summary>
            The client has successfully completed authentication
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.VPNConnectionState.ASSIGNING_IP">
            <summary>
            The SDK is assigning IP to the client.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.VPNConnectionState.CONNECTED">
            <summary>
            The client has connected successfully.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Enumerations.VPNState">
            <summary>
            Represents Vpn Connection state
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.VPNState.DISCONNECTED">
            <summary>
            The client has disconnected or failed a connection attempt.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.VPNState.AUTHENTICATING">
            <summary>
            The authentication process is starting.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.VPNState.AUTHENTICATED">
            <summary>
            The client has successfully completed authentication
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.VPNState.ASSIGNING_IP">
            <summary>
            The SDK is assigning IP to the client.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.VPNState.CONNECTED">
            <summary>
            The client has connected successfully.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Enumerations.VPNStatus">
            <summary>
            Represents the current status of the VPN SDK
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.VPNStatus.CONNECTED">
            <summary>
            VPN is connected.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.VPNStatus.CONNECTING">
            <summary>
            VPN is being connected.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Enumerations.VPNStatus.DISCONNECTED">
            <summary>
            VPN is disconnected.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.DialErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:Atom.SDK.Net.AtomManager.DialError"/> event.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.ErrorEventArgs">
            <summary>
            This is a base class used to provide error information in an Event argument.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.ErrorEventArgs.Exception">
            <summary>
            Gets the exception related to the current error.
            </summary>        
            <returns>
            The exception that caused the error, or null if no exception available.
            </returns>
        </member>
        <member name="P:Atom.SDK.Net.ErrorEventArgs.Message">
            <summary>
            Gets a message that describes the error.
            </summary>        
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="P:Atom.SDK.Net.ErrorEventArgs.ConnectionDetails">
            <summary>
            Gets the details of the attempted connection.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.DialErrorEventArgs.Type">
            <summary>
            Gets the <see cref="T:Atom.SDK.Net.Enumerations.DailErrorType"/> for this error.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.DisconnectedEventArgs">
            <summary>
            Provides data for the <see cref="E:Atom.SDK.Net.AtomManager.Disconnected"/> event.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.DisconnectedEventArgs.Cancelled">
            <summary>
            Gets a value indicating whether the connection was cancelled by the user.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.StateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Atom.SDK.Net.AtomManager.StateChanged"/> event.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.StateChangedEventArgs.State">
            <summary>
            Gets the <see cref="!:Atom.SDK.Net.VPNState"/> for this event.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.OpenVPNException">
            <summary>
            Represents an exception that is thrown while dialing via OpenVPN TCP or UDP protocol.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.SDKException">
            <summary>
            Represents an exception thrown by the Atom SDK.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.SDKException.ErrorCode">
            <summary>
            Gets the error code of the error that caused the exception.
            </summary>        
            <returns>
            A uint error code.
            </returns>
        </member>
        <member name="T:Atom.SDK.Net.RasException">
            <summary>
            Represents an exception that is thrown when a remote access service (RAS) error occurs while dialing a connection.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.StealthVPNException">
            <summary>
            Represents an exception that is thrown while dialing via Stealth protocol.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.ValidationException">
            <summary>
            Represents an exception that is thrown when an invalid parameter or an invalid combination of parameters is supplied
            in the <see cref="T:Atom.SDK.Net.Models.VPNProperties"/>.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._logDir">
            <summary>
            Directory to log to
            </summary>
            <remarks>
            Default is the application's current working directory
            </remarks>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._prefix">
            <summary>
            Prefix to use in file name
            </summary>
            <remarks>
            Default is the empty string, i.e. no prefix.
            </remarks>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._dateFormat">
            <summary>
            Date format to use in file name
            </summary>
            <remarks>
            Default is "yyyy_MM_dd" (e.g. 2013_04_21), which leads to a daily change of the log file.
            </remarks>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._suffix">
            <summary>
            Suffix to use in file name
            </summary>
            <remarks>
            Default is the empty string, i.e. no suffix.
            </remarks>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._extension">
            <summary>
            Extension to use in file name
            </summary>
            <remarks>
            Default is "log".
            </remarks>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._logLevel">
            <summary>
            Log level
            </summary>
            <remarks>
            Log all entries with <see cref="T:Atom.SDK.Net.Helpers.SDKLogger.Severity"/> set here and above. 
            For example, when log level is set to <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Info"/>, incoming entries with severity
            <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Info"/>, <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Warning"/>, <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Error"/> and <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Exception"/> 
            are actually written to the log file. When log level is set to e.g. <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Error"/>, only 
            entries with severity <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Error"/> and <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Exception"/> are actually written to the log file. 
            Default is <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Info"/>.
            </remarks>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._logEntryQueue">
            <summary>
            Log entry queue
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._backgroundTask">
            <summary>
            Background task to write log entries to disk
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._backgroundTaskSyncRoot">
            <summary>
            Snyc root for the background task itself
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._logFileSyncRoot">
            <summary>
            Snyc root for the log file
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.Helpers.SDKLogger._textSeparator">
            <summary>
            Backing field for <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.TextSeparator"/>.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.CurrentDomainProcessExit(System.Object,System.EventArgs)">
            <summary>
            Process is about to exit
            </summary>
            <remarks>
            This is some kind of static destructor used to flush unwritten log entries.
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.SetLogFile(System.String,System.String,System.String,System.String,System.String,System.Nullable{Atom.SDK.Net.Helpers.SDKLogger.Severity},System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Boolean},System.String)">
            <summary>
            Set all log properties at once
            </summary>
            <remarks>
            Set all log customizing properties at once. This is a convenience function. All parameters are optional.
            When logDir is set and it cannot be created or writing a first entry fails, no exception is thrown, but the previous directory, 
            respectively the default directory (the current working directory), is used instead.
            </remarks>
            <param name="logDir"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.LogDir"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.LogDir"/> is not set. Here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.LogDir"/> is created, when it does not exist.</param>
            <param name="prefix"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Prefix"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Prefix"/> is not set.</param>
            <param name="suffix"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Suffix"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Suffix"/> is not set.</param>
            <param name="extension"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Extension"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Extension"/> is not set.</param>
            <param name="dateFormat"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.DateFormat"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.DateFormat"/> is not set.</param>
            <param name="logLevel"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.LogLevel"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.LogLevel"/> is not set.</param>
            <param name="startExplicitly"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.StartExplicitly"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.StartExplicitly"/> is not set.</param>
            <param name="check">Whether to call <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.Check(System.String)"/>, i.e. whether to write a test entry after setting the new log file. If true, the result of <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.Check(System.String)"/> is returned.</param>
            <param name="writeText"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.WriteText"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.WriteText"/> is not set.</param>
            <param name="textSeparator"><see cref="P:Atom.SDK.Net.Helpers.SDKLogger.TextSeparator"/> for details. When null is passed here, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.TextSeparator"/> is not set.</param>
            <returns>Null on success, otherwise an exception with what went wrong.</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.SetLogDir(System.String,System.Boolean)">
            <summary>
            Set new logging directory
            </summary>
            <param name="logDir">The logging diretory to set. When passing null or the empty string, the current working directory is used.</param>
            <param name="createIfNotExisting">Try to create directory if not existing. Default is false.</param>
            <returns>Null if setting log directory was successful, otherwise an exception with what went wrong.</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Check(System.String)">
            <summary>
            Check if logging to <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.FileName"/> works
            </summary>
            <remarks>
            Writes a test entry directly to <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.FileName"/> without using the background task. 
            When no exception is returned, logging to <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.FileName"/> works.
            </remarks>
            <param name="message">Test message to write to the log file</param>
            <returns>Null on success, otherwise an exception with what went wrong.</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Info(System.String,System.Boolean)">
            <summary>
            Write info message to log
            </summary>
            <param name="message">The message to write to the log</param>
            <param name="useBackgroundTask">Whether to use the background task (thread) to write messages to disk. Default is true. This is much faster than writing directly to disk in the main thread.</param>
            <returns>Null on success or the <see cref="T:System.Exception"/> that occurred when processing the message, i.e. when enqueuing the message (when <paramref name="useBackgroundTask"/> is true) or when writing the message to disk (when <paramref name="useBackgroundTask"/> is false).</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Warning(System.String,System.Boolean)">
            <summary>
            Write warning message to log
            </summary>
            <param name="message">The message to write to the log</param>
            <param name="useBackgroundTask">Whether to use the background task (thread) to write messages to disk. Default is true. This is much faster than writing directly to disk in the main thread.</param>
            <returns>Null on success or the <see cref="T:System.Exception"/> that occurred when processing the message, i.e. when enqueuing the message (when <paramref name="useBackgroundTask"/> is true) or when writing the message to disk (when <paramref name="useBackgroundTask"/> is false).</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Error(System.String,System.Boolean)">
            <summary>
            Write error message to log
            </summary>
            <param name="message">The message to write to the log</param>
            <param name="useBackgroundTask">Whether to use the background task (thread) to write messages to disk. Default is true. This is much faster than writing directly to disk in the main thread.</param>
            <returns>Null on success or the <see cref="T:System.Exception"/> that occurred when processing the message, i.e. when enqueuing the message (when <paramref name="useBackgroundTask"/> is true) or when writing the message to disk (when <paramref name="useBackgroundTask"/> is false).</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Log(System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Write exception to log
            </summary>
            <param name="ex">The exception to write to the log</param>
            <param name="useBackgroundTask">Whether to use the background task (thread) to write messages to disk. Default is true. This is much faster than writing directly to disk in the main thread.</param>
            <param name="framesToSkip">How many frames to skip when detecting the calling method, <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetCaller(System.Int32)"/>. This is useful when log calls to <see cref="T:Atom.SDK.Net.Helpers.SDKLogger"/> are wrapped in an application. Default is 0.</param>
            <returns>Null on success or the <see cref="T:System.Exception"/> that occurred when processing the message, i.e. when enqueuing the message (when <paramref name="useBackgroundTask"/> is true) or when writing the message to disk (when <paramref name="useBackgroundTask"/> is false).</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.GetExceptionAsXmlString(System.Exception)">
            <summary>
            Gets an XML string with detailed information about an exception
            </summary>
            <remarks>
            Recursively adds elements for inner exceptions. For the most inner exception, the stack trace is added.
            Tags for <see cref="P:System.Exception.Data"/> are added. Specific properties of the exception types <see cref="T:System.Data.SqlClient.SqlException"/>,
            <see cref="T:System.Runtime.InteropServices.COMException"/> and <see cref="T:System.AggregateException"/> are recognized, too.
            </remarks>
            <param name="ex">The exception to get detailed information about</param>
            <returns>An XML string with detailed information about the passed exception</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.GetExceptionXElement(System.Exception)">
            <summary>
            Gets an XElement for an exception
            </summary>
            <remarks>
            Recursively adds elements for inner exceptions. For the most inner exception, the stack trace is added.
            Tags for <see cref="P:System.Exception.Data"/> are added. Specific properties of the exception types <see cref="T:System.Data.SqlClient.SqlException"/>,
            <see cref="T:System.Runtime.InteropServices.COMException"/> and <see cref="T:System.AggregateException"/> are recognized, too.
            </remarks>
            <param name="ex">The exception to get the XElement for</param>
            <returns>An XElement for the exception</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Log(System.String,Atom.SDK.Net.Helpers.SDKLogger.Severity,System.Boolean,System.Int32)">
            <summary>
            Write message to log
            </summary>
            <remarks>
            See <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.Log(System.Xml.Linq.XElement,Atom.SDK.Net.Helpers.SDKLogger.Severity,System.Boolean,System.Int32)"/>.
            </remarks>
            <param name="message">The message to write to the log</param>
            <param name="severity">Log entry severity</param>
            <param name="useBackgroundTask">Whether to use the background task (thread) to write messages to disk. Default is true. This is much faster than writing directly to disk in the main thread.</param>
            <param name="framesToSkip">How many frames to skip when detecting the calling method, <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetCaller(System.Int32)"/>. This is useful when log calls to <see cref="T:Atom.SDK.Net.Helpers.SDKLogger"/> are wrapped in an application. Default is 0.</param>
            <returns>Null on success or the <see cref="T:System.Exception"/> that occurred when processing the message, i.e. when enqueuing the message (when <paramref name="useBackgroundTask"/> is true) or when writing the message to disk (when <paramref name="useBackgroundTask"/> is false).</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Log(System.Xml.Linq.XElement,Atom.SDK.Net.Helpers.SDKLogger.Severity,System.Boolean,System.Int32)">
            <summary>
            Write XElement to log
            </summary>
            <remarks>
            Unless <paramref name="useBackgroundTask"/> is set to false (default is true), the XElement is not actually 
            written to the file here, but enqueued to the log entry queue. It is dequeued by 
            <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.WriteLogEntriesToFile"/> in a backround task and actually written to the file there. 
            This is much faster than writing directly to disk in the main thread (what is done when 
            <paramref name="useBackgroundTask"/> is set to false). 
            
            However, writing to the file is synchronized between threads. I.e. writing directly can be done from multiple threads. 
            Also, using the background task and writing directly to the file can be used both in parallel.
            
            When <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.StartExplicitly"/> is set to true (default is false), the background task must be started 
            explicitly by calling <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.StartLogging"/>, to get messages actually written to the file. They get enqueued 
            before the background task is started, though. I.e. they will get logged when the background task is started later.
            
            When <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.StartExplicitly"/> is set to false, which is the default, logging background task (thread) is 
            started automatically when first calling this method with <paramref name="useBackgroundTask"/> set to true 
            (which is the default).
            </remarks>
            <param name="xElement">The XElement to log</param>
            <param name="severity">Log entry severity, defaults to <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Info"/></param>
            <param name="useBackgroundTask">Whether to use the background task (thread) to write messages to disk. Default is true. This is much faster than writing directly to disk in the main thread.</param>
            <param name="framesToSkip">How many frames to skip when detecting the calling method, <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetCaller(System.Int32)"/>. This is useful when log calls to <see cref="T:Atom.SDK.Net.Helpers.SDKLogger"/> are wrapped in an application. Default is 0.</param>
            <returns>Null on success or the <see cref="T:System.Exception"/> that occurred when processing the message, i.e. when enqueuing the message (when <paramref name="useBackgroundTask"/> is true) or when writing the message to disk (when <paramref name="useBackgroundTask"/> is false).</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.GetFileName(System.DateTime)">
            <summary>
            Gets the log filename for the passed date
            </summary>
            <param name="dateTime">The date to get the log file name for</param>
            <returns>The log filename for the passed date</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.LogFileExists(System.DateTime)">
            <summary>
            Check, whether there is a log file for the passed date
            </summary>
            <param name="dateTime">The date and time to check the existance of a log file for</param>
            <returns>True = log file exists, false otherwise</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.GetLogFileAsXml">
            <summary>
            Get the current log file as XML document
            </summary>
            <remarks>
            Does not throw an exception when the log file does not exist.
            </remarks>
            <returns>The log file as XML document or null when it does not exist.</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.GetLogFileAsXml(System.DateTime)">
            <summary>
            Get the log file for the passed date as XML document
            </summary>
            <remarks>
            Does not throw an exception when the log file does not exist.
            </remarks>
            <param name="dateTime">The date and time to get the log file for. Use DateTime.Now to get the current log file.</param>
            <returns>The log file as XML document or null when it does not exist.</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.GetLogFileAsText">
            <summary>
            Get the current log file as text document
            </summary>
            <remarks>
            Does not throw an exception when the log file does not exist.
            </remarks>
            <returns>The log file as text document or null when it does not exist.</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.GetLogFileAsText(System.DateTime)">
            <summary>
            Get the log file for the passed date as text document
            </summary>
            <remarks>
            Does not throw an exception when the log file does not exist.
            </remarks>
            <param name="dateTime">The date and time to get the log file for. Use DateTime.Now to get the current log file.</param>
            <returns>The log file as text document or null when it does not exist.</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.ShowLogFile">
            <summary>
            Shows the current log file 
            </summary>
            <remarks>
            Opens the default program to show text or XML files and displays the requested file, if it exists. Does nothing otherwise.
            When <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.WriteText"/> is false, a temporary XML file is created and saved in the users's temporary path each time this method is called. 
            So don't use it excessively in that case. Otherwise, the log file itself is shown.
            </remarks>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.ShowLogFile(System.DateTime)">
            <summary>
            Show a log file for the passed date
            </summary>
            <remarks>
            Opens the default program to show text or XML files and displays the requested file, if it exists. Does nothing otherwise.
            When <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.WriteText"/> is false, a temporary XML file is created and saved in the users's temporary path each time this method is called. 
            So don't use it excessively in that case. Otherwise, the log file itself is shown.
            </remarks>
            <param name="dateTime">The date and time to show the log file for.</param>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.StartLogging">
            <summary>
            Start logging
            </summary>
            <remarks>
            Start background task pointing to <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.WriteLogEntriesToFile"/> to write log files to disk. 
            Is called automatically by <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.Enqueue(System.Xml.Linq.XElement)"/> when the first entry is logged, unless
            <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.StartExplicitly"/> is set to true (default is false). Then, this method has to be 
            called explicitly to start logging.
            </remarks>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.StopLogging(System.Boolean)">
            <summary>
            Stop logging background task, i.e. logging at all.
            </summary>
            <remarks>
            Stop background task pointing to <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.WriteLogEntriesToFile"/> to write log files to disk. 
            </remarks>
            <param name="flush">Whether to write all pending entries to disk before. Default is true.</param>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Flush">
            <summary>
            Wait for all entries having been written to the file
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.ClearQueue">
            <summary>
            Clear background task's log entry queue. I.e. remove all log messages waiting to be written to <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.FileName"/> by the background task.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Enqueue(System.Xml.Linq.XElement)">
            <summary>
            Enqueue log entry to be written to log file
            </summary>
            <remarks>
            When <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.StartExplicitly"/> is set to false (which is the default), 
            logging is started automatically by calling <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.StartLogging"/> from 
            inside this method when the first <paramref name="logEntry"/> is enqueued. 
            
            When <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.StartExplicitly"/> is set to true, <paramref name="logEntry"/> 
            is just enqueued, but not yet actually written to the log file. 
            The latter will be done when <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.StartLogging"/> is called explicitly.
            </remarks>
            <param name="logEntry">The log entry to be enqueued</param>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Peek">
            <summary>
            Get the next log entry from the queue, but do not dequeue it
            </summary>
            <returns>The next element or null when the queue is empty</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.Dequeue">
            <summary>
            Dequeue log entry
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.WriteLogEntriesToFile">
            <summary>
            Write log entries to the file on disk
            </summary>
            <remarks>
            The thread looks every 100 milliseconds for new items in the queue.
            </remarks>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.WriteOwnExceptionToEventLog(System.Exception)">
            <summary>
            Write exceptions happening here, i.e. <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.LastExceptionInBackgroundTask"/> to the event log.
            </summary>
            <remarks>
            When there are exceptions occurring when we try to write to disk, sometimes it is hard to find out why this fails.
            That's why they are written to the event log here. For not to clutter up event log too much, doubles are sorted out.
            The event is written as an error to the application event log under source "SimpleLog".
            </remarks>
            <param name="ex">The exception to write to the event log.</param>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.WriteLogEntryToFile(System.Xml.Linq.XElement)">
            <summary>
            Write one log entry to file
            </summary>
            <remarks>
            This method can be called from the logging background thread or directly 
            from the main thread. Lock accordingly to avoid multiple threads concurrently 
            accessing the file. When the lock can not be got within five seconds, 
            <paramref name="xmlEntry" /> is not being written to the file, but a respective 
            exception is returned, saying what went wrong.
            </remarks>
            <param name="xmlEntry">The entry to write</param>
            <returns>Null when all worked fine, an exception otherwise</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.ConvertXmlToPlainText(System.Xml.Linq.XElement)">
            <summary>
            Convert <paramref name="xmlEntry"/> to plain text to be written to a file.
            </summary>
            <remarks>
            A typical xml entry to be converted looks like this:
            <![CDATA[
            
            <LogEntry Date="2014-06-19 11:20:52" Severity="Info" Source="SimpleLogDemo.Program.DoSomethingElse" ThreadId="9">
              <Message>Entering method. See Source which method is meant.</Message>
            </LogEntry>
            <LogEntry Date="2014-06-19 11:20:52" Severity="Exception" Source="SimpleLogDemo.Program.DoSomething" ThreadId="9">
              <Exception Type="System.Exception" Source="SimpleLogDemo.Program.DoSomethingElse">
                <Message>Something went wrong.</Message>
                <Exception Type="System.NullReferenceException" Source="SimpleLogDemo.Program.DoSomethingElse">
                  <Message>Object reference not set to an instance of an object.</Message>
                  <StackTrace>   at SimpleLogDemo.Program.DoSomethingElse(String fred) in D:\Projekt\VisualStudio\SimpleLogDemo\SimpleLogDemo\Program.cs:line 91</StackTrace>
                </Exception>
              </Exception>
            </LogEntry>
            
            ]]>
            
            This is a basic implementation so far. Feel free to implement your own if you need something more sophisticated, e.g. 
            nicer exception formatting.
            </remarks>
            <param name="xmlEntry">The XML entry to convert.</param>
            <returns><paramref name="xmlEntry"/> converted to plain text.</returns>
        </member>
        <member name="M:Atom.SDK.Net.Helpers.SDKLogger.GetCaller(System.Int32)">
            <summary>
            Detects the method that was calling the log method
            </summary>
            <remarks>
            The method is walking up the frames in the stack trace until the first method outside <see cref="T:Atom.SDK.Net.Helpers.SDKLogger"/> is reached.
            When log calls to <see cref="T:Atom.SDK.Net.Helpers.SDKLogger"/> are wrapped in an application, this may still not be the method where logging 
            was called initially (e.g. when an exception occurred and has been logged). In that case set <paramref name="framesToSkip"/> 
            accordingly to get outside the wrapper method(s).
            </remarks>
            <param name="framesToSkip">How many frames to skip when detecting the calling method. This is useful when log calls to <see cref="T:Atom.SDK.Net.Helpers.SDKLogger"/> are wrapped in an application. Default is 0.</param>
            <returns>Class and method that was calling the log method</returns>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.LogDir">
            <summary>
            Directory to log to
            </summary>
            <remarks>
            Default is the application's current working directory. Can be set using <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.SetLogDir(System.String,System.Boolean)"/>.
            Log file is assembled in <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetFileName(System.DateTime)"/> using <code>string.Format("{0}\\{1}{2}{3}.{4}", LogDir, Prefix, dateTime.ToString(DateFormat), Suffix, Extension)</code>.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.Prefix">
            <summary>
            Prefix to use in file name
            </summary>
            <remarks>
            Default is the empty string, i.e. no prefix.
            Log file is assembled in <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetFileName(System.DateTime)"/> using <code>string.Format("{0}\\{1}{2}{3}.{4}", LogDir, Prefix, dateTime.ToString(DateFormat), Suffix, Extension)</code>.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.Suffix">
            <summary>
            Suffix to use in file name
            </summary>
            <remarks>
            Default is the empty string, i.e. no suffix.
            Log file is assembled in <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetFileName(System.DateTime)"/> using <code>string.Format("{0}\\{1}{2}{3}.{4}", LogDir, Prefix, dateTime.ToString(DateFormat), Suffix, Extension)</code>.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.Extension">
            <summary>
            Extension to use in file name
            </summary>
            <remarks>
            Default is "log". Set to null to return to default.
            Log file is assembled in <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetFileName(System.DateTime)"/> using <code>string.Format("{0}\\{1}{2}{3}.{4}", LogDir, Prefix, dateTime.ToString(DateFormat), Suffix, Extension)</code>.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.DateFormat">
            <summary>
            Date format to use in file name
            </summary>
            <remarks>
            Default is "yyyy_MM_dd" (e.g. 2013_04_21), which leads to a daily change of the log file. Set to null to return to default. Set to e.g. "yyyy_MM_dd_HH" to change log file hourly.
            Log file is assembled in <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetFileName(System.DateTime)"/> using <code>string.Format("{0}\\{1}{2}{3}.{4}", LogDir, Prefix, dateTime.ToString(DateFormat), Suffix, Extension)</code>.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.LogLevel">
            <summary>
            Log level
            </summary>
            <remarks>
            Log all entries with <see cref="T:Atom.SDK.Net.Helpers.SDKLogger.Severity"/> set here and above. In other words, do not write entries to the log file with 
            severity below the severity specified here.
            
            For example, when log level is set to <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Info"/>, incoming entries with severity
            <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Info"/>, <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Warning"/>, <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Error"/> and <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Exception"/> 
            are actually written to the log file. When log level is set to e.g. <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Error"/>, only 
            entries with severity <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Error"/> and <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Exception"/> are actually written to the log file. 
            Default is <see cref="F:Atom.SDK.Net.Helpers.SDKLogger.Severity.Info"/>. <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.Log(System.Xml.Linq.XElement,Atom.SDK.Net.Helpers.SDKLogger.Severity,System.Boolean,System.Int32)"/> for details.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.StartExplicitly">
            <summary>
            Whether logging has to be started explicitly as opposed to start automatically on first log. Default is false.
            </summary>
            <remarks>
            Normally, logging starts automatically when the first log entry is enqueued, <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.Enqueue(System.Xml.Linq.XElement)"/>. In some 
            situations, it may be desired to start logging explicitly at a later time. In the meantime, logging 
            entries are enqued and are processed (i.e. written to the log file) when logging is started. 
            To start logging, use <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.StartLogging"/>
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.WriteText">
            <summary>
            Whether to write plain text instead of XML. Default is false.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.TextSeparator">
            <summary>
            When <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.WriteText"/> is true, this is the separator text entries reperesenting attributes or values are separated with. Defaults to " | ".
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.FileName">
            <summary>
            File to log in
            </summary>
            <remarks>
            Is assembled from <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.LogDir"/>, <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Prefix"/>, the current date and time formatted in <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.DateFormat"/>, 
            <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Suffix"/>, "." and <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.Extension"/>. So, by default, the file is named e.g. "2013_04_21.log" and is written to the current working directory.
            It is assembled in <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.GetFileName(System.DateTime)"/> using <code>string.Format("{0}\\{1}{2}{3}.{4}", LogDir, Prefix, dateTime.ToString(DateFormat), Suffix, Extension)</code>.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.StopEnqueingNewEntries">
            <summary>
            Whether to stop enqueing new entries.
            </summary>
            <remarks>
            Use <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.StopLogging(System.Boolean)"/> to stop logging and <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.StartLogging"/> to start logging.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.StopLoggingRequested">
            <summary>
            Whether to stop logging background task is requested, i.e. to stop logging at all is requested.
            </summary>
            <remarks>
            Use <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.StopLogging(System.Boolean)"/> to stop logging and <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.StartLogging"/> to start logging.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.LastExceptionInBackgroundTask">
            <summary>
            Last exception that occurred in the background task when trying to write to the file.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.NumberOfLogEntriesWaitingToBeWrittenToFile">
            <summary>
            Number of log entries waiting to be written to file
            </summary>
            <remarks>
            When this number is 1000 or more, there seems to be a permanent problem to wite 
            to the file. See <see cref="P:Atom.SDK.Net.Helpers.SDKLogger.LastExceptionInBackgroundTask"/> what it could be.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Helpers.SDKLogger.LoggingStarted">
            <summary>
            Whether logging background task currenty runs, i.e. log entries are written to disk.
            </summary>
            <remarks>
            If logging is not running (yet), log methods can be called anyway. Messages will 
            be written to disk when logging is started. See <see cref="M:Atom.SDK.Net.Helpers.SDKLogger.Enqueue(System.Xml.Linq.XElement)"/> for details.
            </remarks>
        </member>
        <member name="T:Atom.SDK.Net.Helpers.SDKLogger.Severity">
            <summary>
            Log severity
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.AtomConfiguration.BaseUrl">
            <summary>
            Base Url
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.AtomConfiguration.EnableWhitelisting">
            <summary>
            Enable Whitelisting
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.AtomConfiguration.VpnInterfaceName">
            <summary>
            Profile Name to display in VPN interface 
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Models.City">
            <summary>
            Represents a city.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.City.Id">
            <summary>
            Gets or sets the integer id of this city. This is the only property used by the SDK.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.City.Name">
            <summary>
            Gets or sets the name of the city.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Models.ConnectionDetails">
            <summary>
            Represents an object that manages the specific details of the last connected vpn configuration of the session. 
            This class will be handy in resolving details related to recently established connection.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.username">
            <summary>
            The username with which last connection was made.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.bandwidth">
            <summary>
            The bandwidth consumed in the last session.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.session_duration">
            <summary>
            The duration of last session in minutes.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.country">
            <summary>
            The name of the country to which last connection was made.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.protocol_no">
            <summary>
            The protocol number of the protocol via which last connection was made.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.ip_address">
            <summary>
            The IP address assigned in last vpn connection.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.device_type">
            <summary>
            The device type with which the current user established the vpn connection.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.ServerAddress">
            <summary>
            The hostname with which the current user established the vpn connection.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.ServerType">
            <summary>
            The type of the server with which the current user established the vpn connection.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.SpeedTestMethod">
            <summary>
            The method used to receive servers for the last established vpn connection.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.ConnectionDetails.Protocol">
            <summary>
            The protocol used to receive servers for the last established vpn connection.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Models.Country">
            <summary>
            Represents a Country.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Country.Id">
            <summary>
            Gets or sets the integer id of this city. This is the only property used by the SDK.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Country.Name">
            <summary>
            Gets or sets the name of the country.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Country.Latitude">
            <summary>
            Gets or sets the latitude of the country.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Country.Longitude">
            <summary>
            Gets or sets the logitude of the country.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Country.iso_code">
            <summary>
            Gets or sets the ISO Alpha-2 Country code of the current country.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Country.RoundTripTime">
            <summary>
            Gets or sets the least time a packet takes to be sent to the server of this country plus the length of time it takes 
            for an acknowledgment of that packet to be received at the client.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Country.Protocols">
            <summary>
            Gets the protocols supported for this country.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Models.Credentials">
            <summary>
            Represents the network credentials used to authenticate to the vpn server.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.Models.Credentials.#ctor(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Atom.SDK.Net.Models.Credentials"/> object with a username and a password.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Credentials.Username">
            <summary>
            Gets or sets the username used to authenticate to the vpn server.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Credentials.Password">
            <summary>
            Gets or sets the password used to authenticate to the vpn server.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Models.Protocol">
            <summary>
            Represents a Network protocol used to create a VPN tunnel.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Protocol.Id">
            <summary>
            Gets or sets the integer id of this protocol.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Protocol.Name">
            <summary>
            Gets or sets the user friendly name of the protocol.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Protocol.number">
            <summary>
            Gets or sets the number of the protocol. This is the only property used by the SDK.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Protocol.Description">
            <summary>
            A brief description of the protocol.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Protocol.Speed">
            <summary>
            The rating representing the speed of the protocol. The maximum value is 5.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.Protocol.Security">
            <summary>
            The rating representing the security this protocol provides. The maximum value is 5.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Models.SplitApplication">
            <summary>
            Application to be launched through Split Tunneling.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.SplitApplication.ExeName">
            <summary>
            Gets the ExeName of the application.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.SplitApplication.CompleteExePath">
            <summary>
            Gets or sets the CompleteExePath of the application. Full physical path of the Application is required.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.Models.VPNProperties">
            <summary>
            Contains all the properties used by the SDK to establish a VPN connection.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.Models.VPNProperties.#ctor(Atom.SDK.Net.Models.Country,Atom.SDK.Net.Models.Protocol)">
            <summary>
            Initializes a new instance of <see cref="T:Atom.SDK.Net.Models.VPNProperties"/> using a country id and protocol.
            </summary>
            <remarks>
            Use this when a backend server used to generate PSK is not available to connect by providing the SDK with country, 
            protocol and other optional properties.
            </remarks>
            <param name="country">The <see cref="T:Atom.SDK.Net.Models.Country"/> which the SDK will use to create the VPN tunnel.</param>
            <param name="protocol">The <see cref="T:Atom.SDK.Net.Models.Protocol"/> which the SDK will use to create the VPN tunnel.</param>
        </member>
        <member name="M:Atom.SDK.Net.Models.VPNProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Atom.SDK.Net.Models.VPNProperties"/> using <see cref="P:Atom.SDK.Net.Models.VPNProperties.PSK"/>.
            </summary>
            <remarks>
            Create a VPNProperties object with the PSK provided by your backend server. All other properties of this class are 
            ignored by the SDK when <see cref="P:Atom.SDK.Net.Models.VPNProperties.PSK"/> is provided.
            </remarks>
            <param name="psk">The Preshared Key provided by your backend server</param>
        </member>
        <member name="M:Atom.SDK.Net.Models.VPNProperties.#ctor(System.String,Atom.SDK.Net.Models.Protocol)">
            <summary>
            Initializes a new instance of <see cref="T:Atom.SDK.Net.Models.VPNProperties"/> using <see cref="P:Atom.SDK.Net.Models.VPNProperties.DedicatedHostName"/>.
            </summary>
            <remarks>
            Use this when a dedicated IP or hostname is available to connect. No other property of this class is required 
            when hostname or IP Address is provided.
            </remarks>
            <param name="dedicatedHostName">The hostname or IP Address of the VPN server. This should be a valid hostname or IP Address,
            Dial error with a validation exception will be thrown otherwise.
            </param>
            <param name="protocol">The <see cref="T:Atom.SDK.Net.Models.Protocol"/> which the SDK will use to create the VPN tunnel.</param>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.DedicatedHostName">
            <summary>
            Gets the <see cref="P:Atom.SDK.Net.Models.VPNProperties.DedicatedHostName"/> to which last connection was made, or <see langword="null"/>
            </summary>
            <remarks>
            The hostname or IP Address of the VPN server.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.PSK">
            <summary>
            Gets the <see cref="P:Atom.SDK.Net.Models.VPNProperties.PSK"/> with which last connection was made, or <see langword="null"/>
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.Country">
            <summary>
            Gets the <see cref="T:Atom.SDK.Net.Models.Country"/> to which last connection was made, or <see langword="null"/>
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.Protocol">
            <summary>
            Gets or sets the <see cref="T:Atom.SDK.Net.Models.Protocol"/> via which to create the VPN tunnel. This is ignored if the 
            current <see cref="T:Atom.SDK.Net.Models.VPNProperties"/> is created with a PSK.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.SecondaryProtocol">
            <summary>
            Gets or sets the secondary <see cref="T:Atom.SDK.Net.Models.Protocol"/> which will be used if a secure connection could not be 
            established via the primary protocol and <see cref="P:Atom.SDK.Net.Models.VPNProperties.ReconnectAutomatically"/> is set to true. 
            This is ignored if the current <see cref="T:Atom.SDK.Net.Models.VPNProperties"/> is created with a PSK.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.TertiaryProtocol">
            <summary>
            Gets or sets the secondary <see cref="T:Atom.SDK.Net.Models.Protocol"/> which will be used if a secure connection could not be 
            established via the first two protocols and <see cref="P:Atom.SDK.Net.Models.VPNProperties.ReconnectAutomatically"/> is set to true. 
            This is ignored if the current <see cref="T:Atom.SDK.Net.Models.VPNProperties"/> is created with a PSK.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.CityId">
            <summary>
            Gets the <see cref="P:Atom.SDK.Net.Models.VPNProperties.CityId"/> to which last connection was made, or <see langword="null"/>
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.DataCenters">
            <summary>
            Gets or sets the top three fastest datacenters available.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.UseOptimization">
            <summary>
            Gets or sets a value indicating whether the SDK will first Ping the available datacenters 
            for the selected locations to connect to the fastest available VPN server. The default value is false.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.ReconnectAutomatically">
            <summary>
            Gets or Sets a value indicating whether or not the SDK tries to connect again when the connection is lost
            </summary>
            <returns> true if if the SDK will reconnect; otherwise, false.</returns>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.UseSplitTunneling">
            <summary>
            Set this property to use SplitTunneling Feature while connecting VPN.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.SkipUserVerification">
            <summary>
            Set this property to skip User Verification while dialing through DedicatedHostName. Default value is False.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.ServerType">
            <summary>
            Set this property to specify the server type while dialing through DedicatedHostName. Default value is ServerType.windows.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.AutomaticPort">
            <summary>
            Set this property to specify whether the sdk will check for available port on the server automatically in case of dialing with TCP or UDP.
            Setting this will reset <see cref="P:Atom.SDK.Net.Models.VPNProperties.ManualPort"/> to 0.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.Models.VPNProperties.ManualPort">
            <summary>
            Set this property to specify the port on the server to dial in case of TCP or UDP.
            Setting this will reset <see cref="P:Atom.SDK.Net.Models.VPNProperties.AutomaticPort"/> to false.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.AtomManager">
            <summary>
            The main class used to connect and maintain VPN Connections.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.Initialize(System.String,Atom.SDK.Net.Models.AtomConfiguration)">
            <summary>
            Initializes a new instance of the SDK. If the SDK was initialized previously the same object is returned.
            </summary>
            <remarks>
            Initialized a new instance of SDK
            </remarks>
            <param name="secretKey">The secret key provided with the SDK</param>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.ReConnect">
            <summary>
            Reconnect to the last connected server.
            </summary>
            <remarks>
            Reconnect to the last connected server. This will cause a dial error if no connection has been made yet.
            </remarks>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.Connect(Atom.SDK.Net.Models.VPNProperties)">
            <summary>
            Create a vpn connection.
            </summary>
            <remarks>
            </remarks>
            <param name="vpnProperties">The <see cref="T:Atom.SDK.Net.Models.VPNProperties"/> used by the SDK to establish a VPN connection.</param>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.Disconnect">
            <summary>
            Disconnect from VPN.
            </summary>
            <remarks>
            Disconnect the VPN connection.
            </remarks>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.Cancel">
            <summary>
            Cancel the connection that is being made.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.GetConfig">
            <summary>
            Gets the a string dictionary representing the config file used by the SDK.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.SetConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the config file with with predefined keys used by the SDK.
            </summary>
            <param name="dictionary">A string dictionary representing the config file.</param>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.GetLastConnectionDetails">
            <summary>
            Gets the details of the last successful connection made during the current session.
            This function can be used to return the last connected VPN interface details of the current session
            </summary>
            <returns><see cref="T:Atom.SDK.Net.Models.ConnectionDetails"/></returns>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.LaunchSplitTunnelApplication(Atom.SDK.Net.Models.SplitApplication)">
            <summary>
            Launch desired application to SplitTunnel
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.GetConnectedIP">
            <summary>
            Returns connected VPN IP, empty string if not connected
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.GetCountries">
            <summary>
            Get all the <see cref="T:Atom.SDK.Net.Models.Country"/> allowed to this reseller by Atom.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.GetProtocols">
            <summary>
            Get all the <see cref="T:Atom.SDK.Net.Models.Protocol"/> allowed to this reseller by Atom.
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.GetOptimizedCountries">
            <summary>
            Ping the available datacenters and returns the countries with the current latency mapped to <see cref="P:Atom.SDK.Net.Models.Country.RoundTripTime"/>
            </summary>
        </member>
        <member name="M:Atom.SDK.Net.AtomManager.GetCurrentVPNStatus">
            <summary>
            Gets the Current status of the VPN.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Atom.SDK.Net.AtomManager.GetConnectedTime" -->
        <member name="E:Atom.SDK.Net.AtomManager.DialError">
            <summary>
            Occurs when the SDK is unable to connect to the VPN server.
            </summary>
            <remarks>
            Occurs when the SDK is unable to connect to the VPN server.
            </remarks>
        </member>
        <member name="E:Atom.SDK.Net.AtomManager.Connected">
            <summary>
            Occurs when the asynchronous dial operation has completed.
            </summary>
            <remarks>
            Occurs when the asynchronous dial operation has completed.
            </remarks>
        </member>
        <member name="E:Atom.SDK.Net.AtomManager.Disconnected">
            <summary>
            Occurs when the Vpn connection is terminated.
            </summary>
            <remarks>
            Occurs when the Vpn connection is terminated.
            </remarks>
        </member>
        <member name="E:Atom.SDK.Net.AtomManager.StateChanged">
            <summary>
            Occurs when the connection state changes.
            </summary>
            <remarks>
            Occurs when the connection state changes.
            </remarks>
        </member>
        <member name="E:Atom.SDK.Net.AtomManager.Redialing">
            <summary>
            Occurs when the SDK is unable to connect to a sever and retrying to another available server.
            </summary>
            <remarks>
            Occurs when the SDK is unable to connect to a sever and retrying to another available server.
            </remarks>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.SecretKey">
            <summary>
            Gets or sets the application id provided with the SDK
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.IsBusy">
            <summary>
            Gets a value indicating whether the SDK is busy in connecting or disconnecting. Calls to 
            <see cref="M:Atom.SDK.Net.AtomManager.Connect(Atom.SDK.Net.Models.VPNProperties)"/> or <see cref="M:Atom.SDK.Net.AtomManager.Disconnect"/> will have no effect if 
            <see cref="P:Atom.SDK.Net.AtomManager.IsBusy"/> is true. <see cref="M:Atom.SDK.Net.AtomManager.Cancel"/> can be called if the SDK is busy in Connecting.
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.LogPath">
            <summary>
            Gets or sets the directory to log to. Default is the AtomSDK.dll's current working directory.
            Log files are created in the format SDK_{Current Date}.log
            </summary>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.VPNConnectionState">
            <summary>
            Gets the current state of Vpn connection.
            </summary>
            <returns><see cref="!:Atom.SDK.Net.VPNState"/></returns>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.Credentials">
            <summary>
            Gets the <see cref="T:Atom.SDK.Net.Models.Credentials"/> object which were used for last connection, or <see langword="null"/> if no connection has been made yet.
            </summary>
            <returns><see cref="T:Atom.SDK.Net.Models.Credentials"/></returns>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.Country">
            <summary>
            Gets the <see cref="T:Atom.SDK.Net.Models.Country"/> object to which last connection was made, or <see langword="null"/> if no connection has been made yet.
            </summary>
            <returns><see cref="T:Atom.SDK.Net.Models.Country"/></returns>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.City">
            <summary>
            Gets the <see cref="T:Atom.SDK.Net.Models.City"/> object to which last connection was made, or <see langword="null"/> 
            if <see cref="T:Atom.SDK.Net.Models.City"/> was not specified or if no connection has been made yet.
            </summary>
            <returns><see cref="T:Atom.SDK.Net.Models.City"/></returns>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.Protocol">
            <summary>
            Gets the <see cref="T:Atom.SDK.Net.Models.Protocol"/> object which was used for the connection, or <see langword="null"/> if no connection has been made yet.
            </summary>
            <returns><see cref="T:Atom.SDK.Net.Models.Protocol"/></returns>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.VPNProperties">
            <summary>
            Gets or sets the <see cref="T:Atom.SDK.Net.Models.VPNProperties"/> which were used for the connection, or <see langword="null"/> if no connection has been made yet.
            </summary>
            <returns><see cref="T:Atom.SDK.Net.Models.VPNProperties"/></returns>
        </member>
        <member name="P:Atom.SDK.Net.AtomManager.UUID">
            <summary>
            Gets or Sets a Unique User identifier used to connect to a vpn server if a <see cref="T:Atom.SDK.Net.Models.Credentials"/> object is not provided. 
            This value will be ignored if Credentials are provided.
            </summary>
            <returns>A Unique User Identifier string.</returns>
        </member>
        <member name="F:Atom.SDK.Net.RASCM.None">
            <summary>
            No options are valid.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.RASCM.UserName">
            <summary>
            The user name member is valid.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.RASCM.Password">
            <summary>
            The password member is valid.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.RASCM.Domain">
            <summary>
            The domain name member is valid.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.RASCM.DefaultCredentials">
            <summary>
            Indicates the credentials are the default credentials for an all-user connection.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.RASCM.PreSharedKey">
            <summary>
            Indicates a pre-shared key should be retrieved.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.RASCM.ServerPreSharedKey">
            <summary>
            Used to set the pre-shared key on the remote access server.
            </summary>
        </member>
        <member name="F:Atom.SDK.Net.RASCM.DdmPreSharedKey">
            <summary>
            Used to set the pre-shared key for a demand dial interface.
            </summary>
        </member>
        <member name="T:Atom.SDK.Net.RasEntry">
            <summary>
            RasEntry µÄÕªÒªËµÃ÷¡£
            </summary>
        </member>
    </members>
</doc>
